Four Pillars of OOP:
1)Inheritance
2)Polymoprhism
3)Abstraction
4)Encapsulation

1)Inheritance:
It is a mechanism that allows to inherit properties and methods from one class
to other class to avoid duplication we use extends keyword to inherit from one class.
2)Polymorphism
Capability of a method to do different things based on obj that is acting upon same method can act in many different forms we do not to come up with different names everytime we need slightly different behaviour we can achieve polymorphism through method overloading and method overriding
3)Abstraction
Abstraction is a process of hiding implementation details and showing only functionally to the user. Abstraction is what an Object does instead of how it does it

Parent class we only define how the method will look like
1)WHAT THE METHOD WILL RETURN
2)what will be the name of the method
3)how many and wich type of arguments it will take
Child class now provides the implementation

Rules for the Abstract Class:
1) we cant create the object of the abstract classes
2)we cant decrease the visibility of the access modifier
3)Child class must define the abstract methods or it should be declared as abstract
4)we cant decleared a method as private and abstract at the same timebeacuse private methods do not participate in inheritance.
5)we can not declare methods as final and abstract at the same time because final mean something is complete and cant override cannot be changed but abstract mean incompleate and requires implementation by child classes.
6)we can not make a method as static and abstract at the same time because static method can not be overridden rather they are re-declared in child class and we call it method hiding
7)return type in the parent and child classes must be same
8)we can not declare constructors as abstract
9)we cant delcare a class as abstract even though there are no abstract methods in it

We can also achieve Interfaces:
interface is collection of abstract, static and default methods
we should be creating interfaces when our child classes have to implement many different unrelated behaviours
if behaviours are closely related and we want implemented and unimplemented methods we should go for Abstract class

Interface Rules:
2) Interfaces are by default abstract
3) all the variables in an interface are by default public static final
4) we can not make instance fields in interfaces
5) we can not use abstract keyword with the fields because all the fields are
by default public static final
6) all the methods are by default public abstract
7) we can have default methods we can have static methods in interfaces but the
are used to support lambda expression and functional programming advance concepts
that we will not discuss
8) Interfaces can not instance fields that's why they don't have constructors
9) interfaces don't have instance methods
10) we can not create objects of interfaces
11) interfaces support multiple inheritance.
12) we use implements keyword for interfaces.
===============================================
Encapsulation:

